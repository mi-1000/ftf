import re

# A dictionary to hold the functions and variables
export = {}

# Import utilities (if they were available)
# Assuming some functions would be imported similarly in Python
def gsub(text, pattern, repl):
    return re.sub(pattern, repl, text)

def match(text, pattern):
    return re.match(pattern, text)

def toNFD(text):
    # Assuming this is for normalizing text; Python's 'unicodedata' module can be used
    import unicodedata
    return unicodedata.normalize('NFD', text)

def U(*args):
    # This mimics the Lua 'U' function that returns Unicode characters
    return ''.join(chr(arg) for arg in args)

# Data loading placeholders (this would need actual data)
diphthongs = {}  # This should be loaded data
vowels = "aeiou" + "ᵻ" + "ᵿ"  # Example vowels, you'd add actual data

# Define diacritics and other patterns
diacritics = U(
    0x311, 0x32F,
    0x31D, 0x31E,
    0x318, 0x319,
    0x308, 0x324,
    0x339, 0x31C,
    0x31F, 0x320,
    0x33D, 0x2DE,
    0x303, 0x330,
    0x361, 0x35C
)

tone = "[" + U(0x341, 0x340, 0x302) + "]"
nonsyllabicDiacritics = U(0x311, 0x32F)
syllabicDiacritics = U(0x0329, 0x030D)
ties = U(0x361, 0x35C)

lengthDiacritics = U(0x2D0, 0x2D1, 0x306)
vowel = "[" + vowels + "]" + tone + "?"
tie = "[" + ties + "]"
nonsyllabicDiacritic = "[" + nonsyllabicDiacritics + "]"
syllabicDiacritic = "[" + syllabicDiacritics + "]"

UTF8Char = "[\1-\127\194-\244][\128-\191]*"

# Function to count vowels in a given text (remainder)
def get_vowels(remainder, lang):
    if re.search("^[%[/]?%-", remainder) or re.search("%-[%[/]?$", remainder):
        return None

    count = 0
    diphs = diphthongs.get(lang, [])

    remainder = toNFD(remainder)
    remainder = re.sub(r"\((.*)\)", r"\1", remainder)  # Remove parentheses.

    while remainder:
        # Ignore nonsyllabic vowels
        remainder = gsub(remainder, "^" + vowel + nonsyllabicDiacritic, "")

        m = match(remainder, "^." + syllabicDiacritic) or match(remainder, "^" + vowel + tie + vowel)

        for diph in diphs:
            if m:
                break
            m = m or match(remainder, "^" + diph)

        m = m or match(remainder, "^" + vowel)

        if m:
            count += 1
            remainder = remainder[len(m):]
        else:
            remainder = re.sub("^" + UTF8Char, "", remainder)

    if count != 0:
        return count

    return None


def count_vowels2_test(frame):
    args = {
        1: {'required': True},
        2: {'default': ""}
    }

    # Assuming 'args' here would be processed and provided like in the Lua code
    lang = args[1]  # This would be fetched based on the language module
    count = get_vowels(args[2], lang)

    return f'The text "{args[2]}" contains {count} vowels.'


def count_vowels(text):
    text = toNFD(text)
    if not text:
        raise ValueError("Invalid UTF-8")

    count = len(re.findall(vowel, text))
    sequence_count = len(re.findall(vowel + "+", text))
    nonsyllabic_count = len(re.findall(vowel + nonsyllabicDiacritic, text))
    tie_count = len(re.findall(vowel + tie + vowel, text))

    diphthong_count = count - (nonsyllabic_count + tie_count)

    return count, sequence_count, diphthong_count


def count_diphthongs(text, lang):
    text = toNFD(text)
    if not text:
        raise ValueError("Invalid UTF-8")

    diphthongs_for_lang = diphthongs.get(lang, [])
    total = 0

    for diphthong in diphthongs_for_lang:
        total += len(re.findall(diphthong, text))

    return total


def count_vowels(frame):
    args = {
        1: {'default': ""}
    }

    # Assuming 'args' is parsed here
    count, sequence_count, diphthong_count = count_vowels(args[1])

    outputs = []
    outputs.append(f'{count or "an unknown number of"} vowels')
    outputs.append(f'{sequence_count or "an unknown number of"} vowel sequences')
    outputs.append(f'{diphthong_count or "an unknown number of"} vowels or vowels and diphthongs')

    return f'The text "{args[1]}" contains {", ".join(outputs)}.'


def count_vowels_diphthongs(frame):
    args = {
        1: {'required': True},
        2: {'default': ""}
    }

    # Process args here
    lang = args[1]  # This would be fetched based on the language module

    vowels = count_vowels(args[2])
    count = vowels - count_diphthongs(args[2], lang) or 0

    out = f'The text "{args[2]}" contains {count or "an unknown number of"}'

    if count == 1:
        out += ' vowel or diphthong.'
    else:
        out += ' vowels or diphthongs.'

    return out

export['getVowels'] = get_vowels
export['countVowels2Test'] = count_vowels2_test
export['countVowels'] = count_vowels
export['countVowelsDiphthongs'] = count_vowels_diphthongs

# Return the export dictionary
export
